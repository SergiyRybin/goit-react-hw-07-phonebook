{"ast":null,"code":"var _jsxFileName = \"/Users/sergiyrybin/Documents/IT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm .jsx\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactValue, addContact } from 'redux/slice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContactForm() {\n  _s();\n\n  const nameAdd = useSelector(contactValue).map(el => el.name);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    fe;\n    const {\n      name,\n      number\n    } = e.currentTarget.elements;\n\n    if (nameAdd.find(el => el.toLowerCase() === name.value.toLowerCase())) {\n      e.currentTarget.reset();\n      return alert(`${name.value} is already in contacts`);\n    }\n\n    dispatch(addContact({\n      name: name.value,\n      number: number.value,\n      id: nanoid(5)\n    }));\n    e.currentTarget.reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n        title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"tel\",\n        name: \"number\",\n        pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n        title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add contact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContactForm, \"bmp0T1ZWSvBQoBLbmzAMP2Vvi+k=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ContactForm;\nexport default ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/Users/sergiyrybin/Documents/IT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm .jsx"],"names":["nanoid","useDispatch","useSelector","contactValue","addContact","ContactForm","nameAdd","map","el","name","dispatch","handleSubmit","e","preventDefault","fe","number","currentTarget","elements","find","toLowerCase","value","reset","alert","id"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,aAAzC;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACrB,QAAMC,OAAO,GAAGJ,WAAW,CAACC,YAAD,CAAX,CAA0BI,GAA1B,CAA8BC,EAAE,IAAIA,EAAE,CAACC,IAAvC,CAAhB;AAEA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,QAAMU,YAAY,GAAGC,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,EAAE;AACF,UAAM;AAAEL,MAAAA,IAAF;AAAQM,MAAAA;AAAR,QAAmBH,CAAC,CAACI,aAAF,CAAgBC,QAAzC;;AACA,QAAIX,OAAO,CAACY,IAAR,CAAaV,EAAE,IAAIA,EAAE,CAACW,WAAH,OAAqBV,IAAI,CAACW,KAAL,CAAWD,WAAX,EAAxC,CAAJ,EAAuE;AACrEP,MAAAA,CAAC,CAACI,aAAF,CAAgBK,KAAhB;AACA,aAAOC,KAAK,CAAE,GAAEb,IAAI,CAACW,KAAM,yBAAf,CAAZ;AACD;;AACDV,IAAAA,QAAQ,CACNN,UAAU,CAAC;AAAEK,MAAAA,IAAI,EAAEA,IAAI,CAACW,KAAb;AAAoBL,MAAAA,MAAM,EAAEA,MAAM,CAACK,KAAnC;AAA0CG,MAAAA,EAAE,EAAEvB,MAAM,CAAC,CAAD;AAApD,KAAD,CADJ,CAAR;AAIAY,IAAAA,CAAC,CAACI,aAAF,CAAgBK,KAAhB;AACD,GAbD;;AAeA,sBACE;AAAM,IAAA,QAAQ,EAAEV,YAAhB;AAAA,4BACE;AAAA,sCAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,OAAO,EAAC,wHAHV;AAIE,QAAA,KAAK,EAAC,wIAJR;AAKE,QAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAA,wCAEE;AACE,QAAA,IAAI,EAAC,KADP;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,OAAO,EAAC,wFAHV;AAIE,QAAA,KAAK,EAAC,8FAJR;AAKE,QAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAqBE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GA7CQN,W;UACSH,W,EAECD,W;;;KAHVI,W;AA+CT,eAAeA,WAAf","sourcesContent":["import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactValue, addContact } from 'redux/slice';\n\nfunction ContactForm() {\n  const nameAdd = useSelector(contactValue).map(el => el.name);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    fe\n    const { name, number } = e.currentTarget.elements;\n    if (nameAdd.find(el => el.toLowerCase() === name.value.toLowerCase())) {\n      e.currentTarget.reset();\n      return alert(`${name.value} is already in contacts`);\n    }\n    dispatch(\n      addContact({ name: name.value, number: number.value, id: nanoid(5) })\n    );\n\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}