{"ast":null,"code":"import { fetchContacts } from \"service/fetchcontact\";\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { mySlice } from \"./slice\";\nimport { getPersistConfig } from \"redux-deep-persist\";\nimport storage from \"redux-persist/lib/storage\";\nconst rootReducer = combineReducers({\n  myValue: mySlice.reducer\n});\nconst persistConfig = getPersistConfig({\n  key: \"contacts\",\n  storage,\n  blacklist: [\"myValue.contacts.filter\"],\n  rootReducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  // reducer: persistedReducer,\n  reducer: {\n    [fetchContacts.reducerPath]: fetchContacts.reducer\n  },\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware(), fetchContacts.middleware]\n}); // export const persistor = persistStore(store);","map":{"version":3,"sources":["/Users/sergiyrybin/Documents/IT/goit-react-hw-07-phonebook/src/redux/store.jsx"],"names":["fetchContacts","configureStore","combineReducers","mySlice","getPersistConfig","storage","rootReducer","myValue","reducer","persistConfig","key","blacklist","persistedReducer","persistReducer","store","reducerPath","middleware","getDefaultMiddleware"],"mappings":"AAAA,SAASA,aAAT,QAA8B,sBAA9B;AAEA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,kBAAhD;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,MAAMC,WAAW,GAAGJ,eAAe,CAAC;AAClCK,EAAAA,OAAO,EAAEJ,OAAO,CAACK;AADiB,CAAD,CAAnC;AAIA,MAAMC,aAAa,GAAGL,gBAAgB,CAAC;AACrCM,EAAAA,GAAG,EAAE,UADgC;AAErCL,EAAAA,OAFqC;AAGrCM,EAAAA,SAAS,EAAE,CAAC,yBAAD,CAH0B;AAIrCL,EAAAA;AAJqC,CAAD,CAAtC;AAOA,MAAMM,gBAAgB,GAAGC,cAAc,CAACJ,aAAD,EAAgBH,WAAhB,CAAvC;AAEA,OAAO,MAAMQ,KAAK,GAAGb,cAAc,CAAC;AAClC;AACAO,EAAAA,OAAO,EAAE;AACP,KAACR,aAAa,CAACe,WAAf,GAA6Bf,aAAa,CAACQ;AADpC,GAFyB;AAKlCQ,EAAAA,UAAU,EAAGC,oBAAD,IAA0B,CACpC,GAAGA,oBAAoB,EADa,EAEpCjB,aAAa,CAACgB,UAFsB;AALJ,CAAD,CAA5B,C,CAWP","sourcesContent":["import { fetchContacts } from \"service/fetchcontact\";\n\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { mySlice } from \"./slice\";\nimport { getPersistConfig } from \"redux-deep-persist\";\n\nimport storage from \"redux-persist/lib/storage\";\n\nconst rootReducer = combineReducers({\n  myValue: mySlice.reducer,\n});\n\nconst persistConfig = getPersistConfig({\n  key: \"contacts\",\n  storage,\n  blacklist: [\"myValue.contacts.filter\"],\n  rootReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  // reducer: persistedReducer,\n  reducer: {\n    [fetchContacts.reducerPath]: fetchContacts.reducer,\n  },\n  middleware: (getDefaultMiddleware) => [\n    ...getDefaultMiddleware(),\n    fetchContacts.middleware,\n  ],\n});\n\n// export const persistor = persistStore(store);\n"]},"metadata":{},"sourceType":"module"}