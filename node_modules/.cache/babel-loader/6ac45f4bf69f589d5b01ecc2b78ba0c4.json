{"ast":null,"code":"import _slicedToArray from\"/Users/sergiyrybin/Documents/IT/goit-react-hw-07-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{nanoid}from\"nanoid\";import{useAddContactMutation,useGetContactsQuery}from\"redux/slice\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ContactForm(){var _useAddContactMutatio=useAddContactMutation(),_useAddContactMutatio2=_slicedToArray(_useAddContactMutatio,1),addContact=_useAddContactMutatio2[0];var _useGetContactsQuery=useGetContactsQuery(),data=_useGetContactsQuery.data;var handleSubmit=function handleSubmit(e){e.preventDefault();var _e$currentTarget$elem=e.currentTarget.elements,name=_e$currentTarget$elem.name,number=_e$currentTarget$elem.number;if(data){var nameAdd=data.map(function(el){return el.name;});if(nameAdd.find(function(el){return el.toLowerCase()===name.value.toLowerCase();})){alert(\"\".concat(name.value,\" is already in contacts\"));e.currentTarget.reset();return;}}addContact({name:name.value,number:number.value,id:nanoid(5)});e.currentTarget.reset();};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Name\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"name\",pattern:\"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",title:\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",required:true})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Number\",/*#__PURE__*/_jsx(\"input\",{type:\"tel\",name:\"number\",pattern:\"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",title:\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",required:true})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Add contact\"})]});}export default ContactForm;","map":{"version":3,"sources":["/Users/sergiyrybin/Documents/IT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm .jsx"],"names":["nanoid","useAddContactMutation","useGetContactsQuery","ContactForm","addContact","data","handleSubmit","e","preventDefault","currentTarget","elements","name","number","nameAdd","map","el","find","toLowerCase","value","alert","reset","id"],"mappings":"gJAAA,OAASA,MAAT,KAAuB,QAAvB,CACA,OAASC,qBAAT,CAAgCC,mBAAhC,KAA2D,aAA3D,C,wFAEA,QAASC,CAAAA,WAAT,EAAuB,CACrB,0BAAqBF,qBAAqB,EAA1C,gEAAOG,UAAP,2BACA,yBAAiBF,mBAAmB,EAApC,CAAQG,IAAR,sBAAQA,IAAR,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CAC1BA,CAAC,CAACC,cAAF,GAEA,0BAAyBD,CAAC,CAACE,aAAF,CAAgBC,QAAzC,CAAQC,IAAR,uBAAQA,IAAR,CAAcC,MAAd,uBAAcA,MAAd,CAEA,GAAIP,IAAJ,CAAU,CACR,GAAMQ,CAAAA,OAAO,CAAGR,IAAI,CAACS,GAAL,CAAS,SAACC,EAAD,QAAQA,CAAAA,EAAE,CAACJ,IAAX,EAAT,CAAhB,CACA,GAAIE,OAAO,CAACG,IAAR,CAAa,SAACD,EAAD,QAAQA,CAAAA,EAAE,CAACE,WAAH,KAAqBN,IAAI,CAACO,KAAL,CAAWD,WAAX,EAA7B,EAAb,CAAJ,CAAyE,CACvEE,KAAK,WAAIR,IAAI,CAACO,KAAT,4BAAL,CACAX,CAAC,CAACE,aAAF,CAAgBW,KAAhB,GACA,OACD,CACF,CAEDhB,UAAU,CAAC,CAAEO,IAAI,CAAEA,IAAI,CAACO,KAAb,CAAoBN,MAAM,CAAEA,MAAM,CAACM,KAAnC,CAA0CG,EAAE,CAAErB,MAAM,CAAC,CAAD,CAApD,CAAD,CAAV,CAEAO,CAAC,CAACE,aAAF,CAAgBW,KAAhB,GACD,CAjBD,CAmBA,mBACE,cAAM,QAAQ,CAAEd,YAAhB,wBACE,6CAEE,cACE,IAAI,CAAC,MADP,CAEE,IAAI,CAAC,MAFP,CAGE,OAAO,CAAC,wHAHV,CAIE,KAAK,CAAC,wIAJR,CAKE,QAAQ,KALV,EAFF,GADF,cAWE,+CAEE,cACE,IAAI,CAAC,KADP,CAEE,IAAI,CAAC,QAFP,CAGE,OAAO,CAAC,wFAHV,CAIE,KAAK,CAAC,8FAJR,CAKE,QAAQ,KALV,EAFF,GAXF,cAqBE,eAAQ,IAAI,CAAC,QAAb,yBArBF,GADF,CAyBD,CAED,cAAeH,CAAAA,WAAf","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useAddContactMutation, useGetContactsQuery } from \"redux/slice\";\n\nfunction ContactForm() {\n  const [addContact] = useAddContactMutation();\n  const { data } = useGetContactsQuery();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { name, number } = e.currentTarget.elements;\n\n    if (data) {\n      const nameAdd = data.map((el) => el.name);\n      if (nameAdd.find((el) => el.toLowerCase() === name.value.toLowerCase())) {\n        alert(`${name.value} is already in contacts`);\n        e.currentTarget.reset();\n        return;\n      }\n    }\n\n    addContact({ name: name.value, number: number.value, id: nanoid(5) });\n\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}