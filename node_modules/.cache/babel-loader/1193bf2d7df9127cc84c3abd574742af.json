{"ast":null,"code":"var _jsxFileName = \"/Users/sergiyrybin/Documents/IT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm .jsx\",\n    _s = $RefreshSig$();\n\n// import { nanoid } from \"nanoid\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { contactValue, addContact } from \"redux/slice\";\nimport { useGetContactsQuery } from \"redux/slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContactForm() {\n  _s();\n\n  const nameAdd = useSelector(contactValue).map(el => el.name);\n  const dispatch = useDispatch();\n  const {\n    data,\n    error,\n    isLoading\n  } = useGetContactsQuery(); // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  // const { name, number } = e.currentTarget.elements;\n  // if (nameAdd.find((el) => el.toLowerCase() === name.value.toLowerCase())) {\n  //   e.currentTarget.reset();\n  //   return alert(`${name.value} is already in contacts`);\n  // }\n  // dispatch(\n  //   addContact({ name: name.value, number: number.value, id: nanoid(5) })\n  // );\n  // e.currentTarget.reset();\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n        title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"tel\",\n        name: \"number\",\n        pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n        title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add contact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContactForm, \"GR1kCSR8NPj+U6YbWzfcx3rDO8M=\", true, function () {\n  return [useGetContactsQuery];\n});\n\n_c = ContactForm;\nexport default ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/Users/sergiyrybin/Documents/IT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm .jsx"],"names":["useGetContactsQuery","ContactForm","nameAdd","useSelector","contactValue","map","el","name","dispatch","useDispatch","data","error","isLoading"],"mappings":";;;AAAA;AACA;AACA;AAEA,SAASA,mBAAT,QAAoC,aAApC;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACrB,QAAMC,OAAO,GAAGC,WAAW,CAACC,YAAD,CAAX,CAA0BC,GAA1B,CAA+BC,EAAD,IAAQA,EAAE,CAACC,IAAzC,CAAhB;AACA,QAAMC,QAAQ,GAAGC,WAAW,EAA5B;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA6BZ,mBAAmB,EAAtD,CAHqB,CAMrB;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACF;;AAEA,sBACE;AAAA,4BAGE;AAAA,sCAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,OAAO,EAAC,wHAHV;AAIE,QAAA,KAAK,EAAC,wIAJR;AAKE,QAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAaE;AAAA,wCAEE;AACE,QAAA,IAAI,EAAC,KADP;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,OAAO,EAAC,wFAHV;AAIE,QAAA,KAAK,EAAC,8FAJR;AAKE,QAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAuBE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GAhDQC,W;UAG4BD,mB;;;KAH5BC,W;AAkDT,eAAeA,WAAf","sourcesContent":["// import { nanoid } from \"nanoid\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { contactValue, addContact } from \"redux/slice\";\n\nimport { useGetContactsQuery } from \"redux/slice\";\n\nfunction ContactForm() {\n  const nameAdd = useSelector(contactValue).map((el) => el.name);\n  const dispatch = useDispatch();\n  const { data, error, isLoading } = useGetContactsQuery();\n\n\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n\n    // const { name, number } = e.currentTarget.elements;\n    // if (nameAdd.find((el) => el.toLowerCase() === name.value.toLowerCase())) {\n    //   e.currentTarget.reset();\n    //   return alert(`${name.value} is already in contacts`);\n    // }\n    // dispatch(\n    //   addContact({ name: name.value, number: number.value, id: nanoid(5) })\n    // );\n\n    // e.currentTarget.reset();\n  // };\n\n  return (\n    <form \n    // onSubmit={handleSubmit}\n    >\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}