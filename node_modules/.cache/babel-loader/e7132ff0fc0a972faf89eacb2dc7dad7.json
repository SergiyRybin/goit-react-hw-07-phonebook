{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { createApi } from \"@reduxjs/toolkit/query/react\";\nimport axios from \"axios\";\nexport const mySlice = createSlice({\n  name: \"myValue\",\n  initialState: {\n    filter: \"\"\n  },\n  reducers: {\n    filterContact(state, action) {\n      state.filter = action.payload;\n    }\n\n  }\n});\nexport const {\n  filterContact\n} = mySlice.actions;\n\nconst axiosBaseQuery = function () {\n  let {\n    baseUrl\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    baseUrl: \"\"\n  };\n  return async _ref => {\n    let {\n      url,\n      method,\n      data,\n      params\n    } = _ref;\n\n    try {\n      const result = await axios({\n        url: baseUrl + url,\n        method,\n        data,\n        params\n      });\n      return {\n        data: result.data\n      };\n    } catch (axiosError) {\n      var _err$response, _err$response2;\n\n      let err = axiosError;\n      return {\n        error: {\n          status: (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status,\n          data: ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message\n        }\n      };\n    }\n  };\n};\n\nexport const contactsApi = createApi({\n  reducerPath: \"contacts\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: \"https://62d82adc9c8b5185c7846b84.mockapi.io\"\n  }),\n  tagTypes: [\"Contacts\"],\n  endpoints: builder => ({\n    getContacts: builder.query({\n      query: () => ({\n        url: \"/contacts\",\n        method: \"GET\"\n      }),\n      providesTags: [\"Contacts\"]\n    }),\n    addContact: builder.mutation({\n      query: value => ({\n        url: \"/contacts\",\n        method: \"POST\",\n        body: value\n      }),\n      invalidatesTags: [\"Contacts\"]\n    }),\n    delContact: builder.mutation({\n      query: id => ({\n        url: `/contacts/${id}`,\n        method: \"DELETE\"\n      }),\n      invalidatesTags: [\"Contacts\"]\n    })\n  })\n});\nexport const {\n  useGetContactsQuery,\n  useAddContactMutation,\n  useDelContactMutation\n} = contactsApi;","map":{"version":3,"sources":["/Users/sergiyrybin/Documents/IT/goit-react-hw-07-phonebook/src/redux/slice.jsx"],"names":["createSlice","createApi","axios","mySlice","name","initialState","filter","reducers","filterContact","state","action","payload","actions","axiosBaseQuery","baseUrl","url","method","data","params","result","axiosError","err","error","status","response","message","contactsApi","reducerPath","baseQuery","tagTypes","endpoints","builder","getContacts","query","providesTags","addContact","mutation","value","body","invalidatesTags","delContact","id","useGetContactsQuery","useAddContactMutation","useDelContactMutation"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { createApi } from \"@reduxjs/toolkit/query/react\";\nimport axios from \"axios\";\nexport const mySlice = createSlice({\n  name: \"myValue\",\n  initialState: {\n    filter: \"\",\n  },\n  reducers: {\n    filterContact(state, action) {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const { filterContact } = mySlice.actions;\n\nconst axiosBaseQuery =\n  ({ baseUrl } = { baseUrl: \"\" }) =>\n  async ({ url, method, data, params }) => {\n    try {\n      const result = await axios({ url: baseUrl + url, method, data, params });\n      return { data: result.data };\n    } catch (axiosError) {\n      let err = axiosError;\n      return {\n        error: {\n          status: err.response?.status,\n          data: err.response?.data || err.message,\n        },\n      };\n    }\n  };\n\nexport const contactsApi = createApi({\n  reducerPath: \"contacts\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: \"https://62d82adc9c8b5185c7846b84.mockapi.io\",\n  }),\n  tagTypes: [\"Contacts\"],\n  endpoints: (builder) => ({\n    getContacts: builder.query({\n      query: () => ({ url: \"/contacts\", method: \"GET\" }),\n      providesTags: [\"Contacts\"],\n    }),\n    addContact: builder.mutation({\n      query: (value) => ({\n        url: \"/contacts\",\n        method: \"POST\",\n        body: value,\n      }),\n      invalidatesTags: [\"Contacts\"],\n    }),\n    delContact: builder.mutation({\n      query: (id) => ({\n        url: `/contacts/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"Contacts\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetContactsQuery,\n  useAddContactMutation,\n  useDelContactMutation,\n} = contactsApi;\n"]},"metadata":{},"sourceType":"module"}